#pragma config(Sensor, dgtl1,  yLS,            sensorSONAR_mm)
#pragma config(Sensor, dgtl3,  yRS,            sensorSONAR_mm)
#pragma config(Sensor, dgtl5,  xLS,            sensorSONAR_mm)
#pragma config(Sensor, dgtl7,  xRS,            sensorSONAR_mm)
#pragma config(Motor,  port1,           null,          tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port2,           fLeft,         tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port3,           null,          tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port4,           fRight,        tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port5,           null,          tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port6,           bRight,        tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port7,           null,          tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port8,           bLeft,         tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port9,           null,          tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port10,          null,          tmotorServoContinuousRotation, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        TODO
					Sensor
					Straifing
					autonomous
					Step down function on raiseClawa
/*                                                                           */
/*---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"
/*---------------------------------------------------------------------------*/
/*                          Utility Methods						                       */
/*---------------------------------------------------------------------------*/
/*
							Field
y	¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
	¦															 ¦
	¦															 ¦
	¦															 ¦
	¦															 ¦
	¦															 ¦
	¦															 ¦
	¦															 ¦
	¦															 ¦
0	+------------------------------+
	0															x
Dimensions are in centimeteres and also INPUTS
*/
//Array of 14900 bytes, sample packets down below
byte auton[14900];
//CH1, Ch1, Ch3, Riase, Close
//93 times per seond(.01 times per second)
void userMove()//Called repeatedly multiple times per second to reset motor pwoer settings to controller input
{
		if(abs(vexRT[Ch1] + vexRT[Ch3] + vexRT[Ch4])>10){//COntroller dead zone
		motor[fRight] = (vexRT[Ch1] - vexRT[Ch3] + vexRT[Ch4])/1.5;
		motor[bRight] =  (vexRT[Ch1] - vexRT[Ch3] - vexRT[Ch4])/1.5;
		motor[fLeft] = (vexRT[Ch1] + vexRT[Ch3] + vexRT[Ch4])/1.5;
		motor[bLeft] =  (vexRT[Ch1] + vexRT[Ch3] - vexRT[Ch4])/1.5;
		}else{
		motor[fRight] = 0;
		motor[bRight] =  0;
		motor[fLeft] = 0;
		motor[bLeft] =  0;
	}
}

void userMove(int index)//Called during auton, to read on a certain index
{
		motor[fRight] = (auton[index] - auton[index+1] + auton[index+2])/1.5;
		motor[bRight] =  (auton[index] - auton[index+1] - auton[index+2])/1.5;
		motor[fLeft] = (auton[index] + auton[index+1] + auton[index+2])/1.5;
		motor[bLeft] =  (auton[index] + auton[index+1] - auton[index+2])/1.5;
}

void raiseClaw(float speed)//Sets the scissor lift motors to a certain speed/power setting
{							//Spped greater than 0 lifts scissor lift, speed less than 0 lowers lift
			motor[port1] = speed;
			motor[port3] = -speed;
			motor[port7] = speed;
			motor[port10] = speed;
}

void openClaw(float speed){//Sets the claw motors to a certain speed/power setting
							//Speed greater than 0 closes, less than 0 opens
			motor[port5] = speed;
			motor[port9] = -speed;
}

void moveX(int speed){//Sets the motors to a certain speed/power setting to move on the x-axis(left or right)
		//Spped greater than 0 moves right, less than 0 moves left
		motor[fRight] = (speed);
		motor[bRight] =  -(speed);
		motor[fLeft] = (speed);
		motor[bLeft] =  - (speed);

}
void moveY(int speed){//Sets the motors to a certain speed/power setting to move on the y-axis(forward and backwards)
	//Speed greater than 0 moves forward, less than 0 moves backwards
		motor[fRight] = -(speed);
		motor[bRight] =  -(speed);
		motor[fLeft] = (speed);
		motor[bLeft] =  (speed);
}


void moveXY(int xSpeed, int ySpeed){//MOves on the x and y axis accorind tos et y and x speeds

		motor[fRight] = (vexRT[Ch3] - vexRT[Ch1] - vexRT[Ch4])/1.5;
		motor[bRight] =  (vexRT[Ch3] - vexRT[Ch1] + vexRT[Ch4])/1.5;
		motor[fLeft] = (vexRT[Ch3] + vexRT[Ch1] + vexRT[Ch4])/1.5;
		motor[bLeft] =  (vexRT[Ch3] + vexRT[Ch1] - vexRT[Ch4])/1.5;
}

void moveToX(float xDisp){//Move the bot to the niputed x displacement from wall
	while(abs(SensorValue(xLS)- xDisp) <= 1){
		int currDisp = SensorValue(xLS);
		if(currDisp > xDisp){
				moveX(-127);
		}else	if(currDisp < xDisp){
				moveX(127);
		}
	}
	moveX(0);
}

void moveToY(float yDisp){//Move the bot to the niputed y displacement from wall

	while(abs(SensorValue(yLS)- yDisp) <= 1){
		int currDisp =SensorValue(yLS);
		if(currDisp > yDisp){
				moveY(-127);
		}else	if(currDisp < yDisp){
				moveY(127);
		}
	}
	moveY(0);
}

void moveDispX(float xDisp){//Takes in the amount of x displaced, will displace the current x displacement by amound inputted, forexample x currently
									//at 70 from the leftinput(30) will move 70 to the right
	float beginX = SensorValue(xLS);
	float targetX = beginX + xDisp;
	moveToX(targetX);
}

void moveDispY(float yDisp){//Takes in the amount of y displaced, will displace the current y displacement by amound inputted, forexample y currently
											//at 30 from the bottom input(70) will move 70 up
	float beginY = SensorValue(yLS);
	float targetY = beginY + yDisp;
	moveToY(targetY);
}

/*void moveToXY(int xDisp, int yDisp){//Will displace both x and y at the same time
	bool running = true;
	int beginX = SONAR SENSOR XVALUE;
	int targetX = beginX + xDisp;
	int beginY = SONAR SENSOR yVALUE;
	int targetX = beginY + yDisp;
	while(running){
		//TODO move(left or right) in which way to achieve target value
		if(current XvaluSoNAR - targetX <= 0&&current XvaluSoNAR - targetY <= 0)running = false;
	}
}
*/
/*
void moveToXY(int xDisp, int yDisp){//Will move to both xDisp and yDisp at the same time
	bool running = true;
	while(running){
		//TODO move(left or right) in which way to achieve target value
		if(current XvaluSoNAR - xDisp <= 0&&current XvaluSoNAR - yDisp <= 0)running = false;
	}
}
*/

void rotate(int speed){//Speed for rotation of motors
	//greater tjan 0 is righyt/ clockwise
			motor[fRight] = speed;
			motor[bRight] =  speed;
			motor[fLeft] = speed;
			motor[bLeft] =  speed;
}
void align(){//Create a triangle to align the bot with rotate to have it perpendicular to the walls
	float	yLeft= SensorValue(yLS);
	float yRight= SensorValue(yRS);
	bool running = true;
	while (running){
		if(abs(yLeft - yRight)<= 1){
			running = false;
		}else if(yLeft<yRight){
			rotate(-1);
		}else if(yLeft>yRight){
			rotate(1);
		}
	}
}



/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
void oldAuton(){
	raiseClaw(120);
	moveY(30);
	sleep(500);
	openClaw(127);
	sleep(400);
	openClaw(0);
	sleep(100);
	moveY(127);
	sleep(2000);
	openClaw(0);
raiseClaw(0);
moveY(0);
moveY(-127);
sleep(800);
moveY(0);
rotate(1);
sleep(500);
moveY(127);
sleep(500);
rotate(-1);
sleep(500);
moveY(127);
sleep(500);
moveY(0);
}

void playMap(){
	clearDebugStream();
		long lastTime = nSysTime;
		float delta = 0.0;
		float ms = 1000.0/((14900/5)/15);//Secon in miliseconds/ amount of bytes in a packet of 5 divided into 15 seconds

		int index = 0;
		while (true){
			long now = nSysTime;
			delta += (now - lastTime) / ms;
			lastTime = now;
				if (delta >= 1.0){
					userMove(index);
					raiseClaw(auton[index+3]);
					raiseClaw(auton[index+4]);
					delta --;
					//writeDebugStreamLine("Packet %d, is : %hi, %hi, %hi, %hi, %hi",index, auton[index],auton[index+1],auton[index+2],auton[index+3],auton[index+4])
					index+=5;
				}
	}
  // User control code here, inside the loop
	/*
  while (true)
  {
  	userMove();

		if(vexRT[Btn5U] == 1)raiseClaw(120);
		else if(vexRT[Btn5D] == 1) raiseClaw(-120);
		else raiseClaw(0);

		if(vexRT[Btn6U] == 1)openClaw(127);
		else if(vexRT[Btn6D] == 1) openClaw(-127);
		else openClaw(0);
  }
  */

}
void map(){
clearDebugStream();
		long lastTime = nSysTime;
		float delta = 0.0;
		float ms = 1000.0/(200);//Secon in miliseconds/ amount of bytes in a packet of 5 divided into 15 seconds
		bool running = true;
		int index = 0;
		while (running){
			long now = nSysTime;
			delta += (now - lastTime) / ms;
			lastTime = now;
				if (delta >= 1.0){
					if(index>=14875){running=false;break;}else{index+=5;}
					userMove();
					auton[index]=vexRT[Ch1];
					auton[index+1]=vexRT[Ch3];
					auton[index+2]=vexRT[Ch4];
					if(vexRT[Btn5U] == 1){raiseClaw(120);auton[index+3]=120;}
					else if(vexRT[Btn5D] == 1){ raiseClaw(-120);auton[index+3]=-120;}
					else {raiseClaw(0);auton[index+3]=0;}

					if(vexRT[Btn6U] == 1){openClaw(127);auton[index+4]=127;}
					else if(vexRT[Btn6D] == 1){ openClaw(-127);auton[index+4]=-127;}
					else {openClaw(0);auton[index+4]=0;}
					delta --;
					//writeDebugStreamLine("Packet %d, is : %hi, %hi, %hi, %hi, %hi",index, auton[index],auton[index+1],auton[index+2],auton[index+3],auton[index+4]);
					//if(index>14900)index+=5;else running=false;

				}

			/*


		}*/
	}
	int i = 0;
	while( i < 14900){
		writeDebugStreamLine("%hi, %hi, %hi, %hi, %hi,", auton[i],auton[i+1],auton[i+2],auton[i+3],auton[i+4]);
		i+=5;
		sleep(60);
	}
	//brenden can't help but suck my cock - evan
  // User control code here, inside the loop
	/*
  while (true)
  {
  	userMove();

		if(vexRT[Btn5U] == 1)raiseClaw(120);
		else if(vexRT[Btn5D] == 1) raiseClaw(-120);
		else raiseClaw(0);

		if(vexRT[Btn6U] == 1)openClaw(127);
		else if(vexRT[Btn6D] == 1) openClaw(-127);
		else openClaw(0);
  }
  */
}
task autonomous()
{
	oldAuton();
}
/*

moveY(120);
sleep(500);
raiseClaw(120);
openClaw(30);
sleep(200);
openClaw(0);
sleep(1300);
moveY(0);
sleep(400);
raiseClaw(0);
//=====
moveY(-80);
sleep(300);
moveY(0);
moveX(90);
sleep(300);
moveY(80);
sleep(300);
moveY(-80);
sleep(300);
moveY(0);
moveX(90);
sleep(300);
moveY(80);
moveY(-80);
sleep(300);
moveY(0);
moveX(90);
sleep(300);
moveY(80);
sleep(300);
moveY(-80);
sleep(300);
moveY(0);
moveX(90);
sleep(300);
moveY(80);

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{

	while (true)
  {

  	userMove();

		if(vexRT[Btn5U] == 1)raiseClaw(120);
		else if(vexRT[Btn5D] == 1) raiseClaw(-120);
		else raiseClaw(0);

		if(vexRT[Btn6U] == 1)openClaw(110);
		else if(vexRT[Btn6D] == 1) openClaw(-110);
		else openClaw(0);
  }

  //TODO MOTOR STOPPED AND PRINT DONE 000000
  //map();
  //newAuton();
}
